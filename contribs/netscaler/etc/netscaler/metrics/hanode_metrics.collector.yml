---

##
## url: https://developer-docs.citrix.com/projects/netscaler-nitro-api/en/12.0/statistics/ha/hanode/
## url: https://developer-docs.netscaler.com/en-us/adc-nitro-api/current-release/statistics/ha/hanode
###
#

collector_name: netscaler_hanode_metrics
metric_prefix: citrixadc_ha

templates:
  masterState: '
    {{- $masterStateDef := dict
          "PRIMARY"       "1"
          "SECONDARY"     "2"
          "STAYSECONDARY" "3"
          "CLAIMING "     "4"
          "FORCE CHANGE"  "5"
    }}
    {{ pluck . $masterStateDef | first | default "0" }}'

scripts:
  get stat_hanode:
    - name: collect cluster info
      when:
        - EQ (LEN .config.cluster) 0
      actions:
        - name: collect config hanode
          query:
            url: /config/hanode
            var_name: results
            debug: true
        - name: build cluster conf
          # loop: "{{ .results.hanode | toRawJson }}"
          loop: $results.hanode
          loop_var: node
          actions:
            - name: build node
              set_fact:
                hastate : '{{- template "masterState" ( .node.state | upper) -}}'
                state: '{{ if eq .node.hastatus "UP" }}1{{ else }}0{{ end }}'
            - name: build node2
              set_fact:
                _:  '{{- $node := dict
                    "id"      .node.id
                    "name"    ( lookupAddr .node.ipaddress )
                    "ip"      .node.ipaddress
                    "state"   .state
                    "hastate" .hastate
                    -}}
                    {{- exporterSet .config.cluster .node.id $node -}}'
        - name: keep config[cluster]
          set_stats:
            # config.cluster : '{{ .config.cluster | toRawJson }}'
            config.cluster : $config.cluster

    - name: proceed cluster config elements
      loop: '{{ (exporterValues .config.cluster) | toRawJson }}'
      loop_var: node
      actions:
        - name: build labels
          set_fact:
            key_labels:
              hanode_id:   $node.id
              hanode_ip:   $node.ip
              hanode_name: $node.name
        - name: build metrics
          metric_prefix: citrixadc_ha_cluster_node
          scope: none
          metrics:
            - metric_name: status
              help: "Indicates the high availability state of the node. 0 Other - 1 Primary - 2 Secondary - 3 StaySecondary - 4 Claiming - 5 Force Change"
              type: gauge
              key_labels: $key_labels
              values:
                _: $node.state
            - metric_name: hastatus
              help: "Indicate the state of the node in the cluster 1 UP / 0 else."
              type: gauge
              key_labels: $key_labels
              values:
                _: $node.hastate


    - name: collect stat hanode
      query:
        url: /stat/hanode
        var_name: results
        # debug: true

    - name: proceed elements
      when: eq .hacurstatus "YES"
      scope: results.hanode
      metrics:
        - metric_name: available
          help: "Whether a NetScaler appliance is configured for high availability."
          type: gauge
          key_labels:
            status: "{{ .hacurstatus | toString }}"
          values:
            _: '{{ if eq .hacurstatus "YES" }}1{{ else }}0{{ end }}'

        - metric_name: node_state
          help: "State of the HA node, based on its health, in a high availability setup 1 UP / 0 else"
          type: gauge
          key_labels:
            state: "{{ .hacurstate | toString }}"
          values:
            _: '{{ if eq .hacurstate "UP" }}1{{ else }}0{{ end }}'
          # when: eq .hacurstatus "YES"

        - metric_name: node_hastate
          help: "Indicates the high availability state of the node. 0 Other - 1 Primary - 2 Secondary"
          type: gauge
          key_labels:
            node_state: "{{ .hacurmasterstate | toString | lower }}"
          values:
            _: '{{ template "masterState" (.hacurmasterstate | upper) }}'
          # when: eq .hacurstatus "YES"

        - metric_name: node_start_timestamp
          help: "Timestamp when the last master state transition occurred."
          type: gauge
          key_labels:
            node_transtime: $transtime
          values:
            _: '{{ mustToDate "Mon Jan _2 15:04:05 2006" .transtime | unixEpoch }}'
          # when: eq .hacurstatus "YES"

        - metric_name: node_propagation_timeout
          help: "Number of times propagation timed out."
          type: counter
          values:
            _: $haerrproptimeout
          # when: eq .hacurstatus "YES"

        - metric_name: node_sync_failure
          help: "Number of times synchronization failed since that last transition."
          type: counter
          values: 
            _: $haerrsyncfailure
          # when: eq .hacurstatus "YES"

...

